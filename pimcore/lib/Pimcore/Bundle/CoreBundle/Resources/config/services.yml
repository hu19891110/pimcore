services:
    pimcore.bundle_locator:
        class: Pimcore\HttpKernel\BundleLocator\BundleLocator
        arguments: ['@kernel']

    pimcore.web_path_resolver:
        class: Pimcore\Service\WebPathResolver



    #
    # CONTROLLERS
    #

    pimcore.controller.config.config_normalizer:
        class: Pimcore\Controller\Config\ConfigNormalizer
        arguments: ['@kernel']

    pimcore.controller.config.controller_data_provider:
        class: Pimcore\Controller\Config\ControllerDataProvider
        arguments: ['@kernel', '%pimcore.service_controllers%']

    #
    # SESSION
    #

    # Sessions need to be configured (e.g. adding custom attribute bags) before they are started. The configurator handles
    # a collection of configurator instances which can be added via addConfigurator or by using the pimcore.session.configurator
    # DI tag. See the SessionConfiguratorPass for details.
    Pimcore\Session\SessionConfigurator:
        public: false

    #
    # SECURITY
    #

    # Decorate the symfony encoder factory with our own. Encoders operating on pimcore admin users and pimcore objects using
    # the password field definition need access to the user instance while encoding the password. Our factory allows delegating
    # encoder building to sub-factories which are able to build and cache an encoder per user object.
    #
    # See UserAwareEncoderFactory which is used from the admin bundle and from CMS demo profile.
    #
    # The second argument (factory mapping) is read from config (pimcore.security.encoder_factories) and set by the extension.
    pimcore.security.encoder_factory:
        class: Pimcore\Security\Encoder\EncoderFactory
        decorates: security.encoder_factory
        arguments: ['@pimcore.security.encoder_factory.inner', '@?']
        public: false

    #
    # TRANSLATOR
    #

    pimcore.translator:
      class: Pimcore\Translation\Translator
      decorates: translator
      arguments: ['@pimcore.translator.inner']
      calls:
        - [setKernel, ['@kernel']]
        - [setAdminPath, ['%pimcore.admin.translations.path%']]

    #
    # LOCALE
    #

    pimcore.locale:
      class: Pimcore\Service\Locale
      arguments: ['@request_stack', '@pimcore.translator']

    # Formatting service for dates, times and numbers
    pimcore.locale.intl_formatter:
      class: Pimcore\Service\IntlFormatterService
      arguments: ['@pimcore.locale']


    #
    # APPLICATION LOGGER
    #

    pimcore.app_logger:
      alias: pimcore.app_logger.default

    pimcore.app_logger.default:
      class: Pimcore\Log\ApplicationLogger
      calls:
        - [addWriter, ['@pimcore.app_logger.db_writer']]

    pimcore.app_logger.db_writer:
      class: Pimcore\Log\Handler\ApplicationLoggerDb

    #
    # INFRASTRUCTURE
    #

    # support autowiring on pimcore connection class by creating an alias
    Pimcore\Db\Connection: '@database_connection'

    pimcore.maintenance.schedule_manager:
        class: Pimcore\Model\Schedule\Manager\Procedural
        arguments: ['maintenance.pid', '@logger']
        tags:
            - { name: monolog.logger, channel: pimcore.maintenance }

    # creates needed pimcore directories
    pimcore.cache_warmer.mkdir:
        class: Pimcore\HttpKernel\CacheWarmer\MkdirCacheWarmer
        tags:
            - { name: kernel.cache_warmer }

    #
    # RUNTIME CACHE
    #

    pimcore.cache.runtime:
      class: Pimcore\Cache\Runtime
      synthetic: true

    #
    # REQUEST SPECIFICS
    #

    pimcore.service.request_matcher_factory:
        class: Pimcore\Service\RequestMatcherFactory

    pimcore.service.context.pimcore_context_guesser:
        class: Pimcore\Service\Context\PimcoreContextGuesser
        arguments: ['@pimcore.service.request_matcher_factory']

    #
    # REQUEST RESOLVERS
    #
    # Read/write/normalize defined request attributes (e.g. document)
    #

    pimcore.service.request.pimcore_context_resolver:
        class: Pimcore\Service\Request\PimcoreContextResolver
        arguments: ['@request_stack', '@pimcore.service.context.pimcore_context_guesser']

    pimcore.service.request.site_resolver:
        class: Pimcore\Service\Request\SiteResolver
        arguments: ['@request_stack']

    pimcore.service.request.editmode_resolver:
        class: Pimcore\Service\Request\EditmodeResolver
        arguments: ['@request_stack', '@pimcore_admin.security.user_loader', '@pimcore.http.request_helper']
        calls:
            - [setLogger, ['@logger']]
        tags:
            - { name: monolog.logger, channel: init }
            - { name: pimcore.templating.vars_provider }

    pimcore.service.request.document_resolver:
        class: Pimcore\Service\Request\DocumentResolver
        arguments: ['@request_stack']
        tags:
            - { name: pimcore.templating.vars_provider }

    pimcore.service.request.template_resolver:
        class: Pimcore\Service\Request\TemplateResolver
        arguments: ['@request_stack', '@pimcore.controller.config.config_normalizer']

    pimcore.service.request.template_vars_resolver:
        class: Pimcore\Service\Request\TemplateVarsResolver
        arguments: ['@request_stack']

    pimcore.service.request.view_model_resolver:
        class: Pimcore\Service\Request\ViewModelResolver
        arguments: ['@request_stack', '@pimcore.service.request.template_vars_resolver']

    pimcore.service.request.response_header_resolver:
        class: Pimcore\Service\Request\ResponseHeaderResolver
        arguments: ['@request_stack']

    #
    # EXTENSIONS
    #

    # extension manager config will be built on kernel boot and injected
    # into the container at runtime
    pimcore.extension.config:
        class: Pimcore\Extension\Config
        synthetic: true


    #
    # PIMCORE BUNDLES
    #

    pimcore.extension.bundle_locator:
        class: Pimcore\Extension\Bundle\PimcoreBundleLocator
        arguments:
            - '@pimcore.composer.package_info'
            - '%pimcore.extensions.bundles.search_paths%'
            - '%pimcore.extensions.bundles.handle_composer%'

    pimcore.extension.bundle.state_config:
        class: Pimcore\Extension\Bundle\Config\StateConfig
        arguments: ['@pimcore.extension.config']

    pimcore.extension.bundle_manager:
        class: Pimcore\Extension\Bundle\PimcoreBundleManager
        arguments:
            - '@pimcore.extension.bundle.state_config'
            - '@pimcore.extension.bundle_locator'
            - '@kernel'
            - '@event_dispatcher'
            - '@router'


    #
    # PIMCORE SERVICES
    #

    pimcore.composer.package_info:
        class: Pimcore\Composer\PackageInfo

    pimcore.bundle_config_locator:
        class: Pimcore\Config\BundleConfigLocator
        arguments: ['@kernel']

    pimcore.http.request_helper:
        class: Pimcore\Http\RequestHelper
        arguments: ['@request_stack']

    pimcore.http.response_helper:
        class: Pimcore\Http\ResponseHelper

    # TODO inject user?
    pimcore.document_service:
        class: Pimcore\Model\Document\Service

    pimcore.document.renderer:
        class: Pimcore\Document\Renderer\DocumentRenderer
        arguments:
            - '@pimcore.http.request_helper'
            - '@pimcore.templating.action_renderer'
            - '@fragment.renderer.inline'
            - '@Pimcore\Routing\Dynamic\DocumentRouteHandler'

    pimcore.http_client:
        class: \GuzzleHttp\Client
        factory: ['Pimcore\Http\ClientFactory', createHttpClient]

    pimcore.rest_client:
        class: Pimcore\Tool\RestClient
        arguments: ['@pimcore.http_client']

    pimcore.tool.assets_installer:
        class: Pimcore\Tool\AssetsInstaller
        arguments: ['@kernel', '@pimcore_admin.serializer']
