services:
    _defaults:
        autowire: true
        autoconfigure: true

    #
    # SESSION
    #

    # Sessions need to be configured (e.g. adding custom attribute bags) before they are started. The configurator handles
    # a collection of configurator instances which can be added via addConfigurator or by using the pimcore.session.configurator
    # DI tag. See the SessionConfiguratorPass for details.
    Pimcore\Session\SessionConfigurator:
        public: false

    #
    # SECURITY
    #

    # Decorate the symfony encoder factory with our own. Encoders operating on pimcore admin users and pimcore objects using
    # the password field definition need access to the user instance while encoding the password. Our factory allows delegating
    # encoder building to sub-factories which are able to build and cache an encoder per user object.
    #
    # See UserAwareEncoderFactory which is used from the admin bundle and from CMS demo profile.
    #
    # The second argument (factory mapping) is read from config (pimcore.security.encoder_factories) and set by the extension.
    pimcore.security.encoder_factory:
        class: Pimcore\Security\Encoder\EncoderFactory
        decorates: security.encoder_factory
        arguments: ['@pimcore.security.encoder_factory.inner', '@?']
        public: false


    #
    # APPLICATION LOGGER
    #

    pimcore.app_logger:
      alias: pimcore.app_logger.default

    pimcore.app_logger.default:
      class: Pimcore\Log\ApplicationLogger
      calls:
        - [addWriter, ['@pimcore.app_logger.db_writer']]

    pimcore.app_logger.db_writer:
      class: Pimcore\Log\Handler\ApplicationLoggerDb


    #
    # INFRASTRUCTURE
    #

    Pimcore\Model\Schedule\Manager\Procedural:
        public: true
        arguments:
            $pidFileName: 'maintenance.pid'
        tags:
            - { name: monolog.logger, channel: pimcore.maintenance }

    # creates needed pimcore directories
    Pimcore\HttpKernel\CacheWarmer\MkdirCacheWarmer:
        public: false
        tags:
            - { name: kernel.cache_warmer }


    #
    # CONTROLLERS
    #

    Pimcore\Controller\Config\ConfigNormalizer: ~

    Pimcore\Controller\Config\ControllerDataProvider:
        public : true
        arguments:
            $serviceControllers: '%pimcore.service_controllers%'


    #
    # HTTP/REST clients
    #

    pimcore.http_client:
        class: \GuzzleHttp\Client
        factory: ['Pimcore\Http\ClientFactory', createHttpClient]

    pimcore.rest_client:
        alias: Pimcore\Tool\RestClient
        public: true

    Pimcore\Tool\RestClient:
        public: true
        arguments:
            - '@pimcore.http_client'

