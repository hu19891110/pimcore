services:
    _defaults:
        autowire: true
        autoconfigure: true

    #
    # SESSION
    #

    # Sessions need to be configured (e.g. adding custom attribute bags) before they are started. The configurator handles
    # a collection of configurator instances which can be added via addConfigurator or by using the pimcore.session.configurator
    # DI tag. See the SessionConfiguratorPass for details.
    Pimcore\Session\SessionConfigurator:
        public: false

    #
    # SECURITY
    #

    # Decorate the symfony encoder factory with our own. Encoders operating on pimcore admin users and pimcore objects using
    # the password field definition need access to the user instance while encoding the password. Our factory allows delegating
    # encoder building to sub-factories which are able to build and cache an encoder per user object.
    #
    # See UserAwareEncoderFactory which is used from the admin bundle and from CMS demo profile.
    #
    # The second argument (factory mapping) is read from config (pimcore.security.encoder_factories) and set by the extension.
    pimcore.security.encoder_factory:
        class: Pimcore\Security\Encoder\EncoderFactory
        decorates: security.encoder_factory
        arguments: ['@pimcore.security.encoder_factory.inner', '@?']
        public: false


    #
    # APPLICATION LOGGER
    #

    pimcore.app_logger:
      alias: pimcore.app_logger.default

    pimcore.app_logger.default:
      class: Pimcore\Log\ApplicationLogger
      calls:
        - [addWriter, ['@pimcore.app_logger.db_writer']]

    pimcore.app_logger.db_writer:
      class: Pimcore\Log\Handler\ApplicationLoggerDb

    #
    # INFRASTRUCTURE
    #

    Pimcore\Model\Schedule\Manager\Procedural:
        public: true
        arguments:
            $pidFileName: 'maintenance.pid'
        tags:
            - { name: monolog.logger, channel: pimcore.maintenance }

    # creates needed pimcore directories
    Pimcore\HttpKernel\CacheWarmer\MkdirCacheWarmer:
        public: false
        tags:
            - { name: kernel.cache_warmer }

    #
    # REQUEST SPECIFICS
    #

    pimcore.service.request_matcher_factory:
        class: Pimcore\Service\RequestMatcherFactory

    pimcore.service.context.pimcore_context_guesser:
        class: Pimcore\Service\Context\PimcoreContextGuesser
        arguments: ['@pimcore.service.request_matcher_factory']

    #
    # REQUEST RESOLVERS
    #
    # Read/write/normalize defined request attributes (e.g. document)
    #

    pimcore.service.request.pimcore_context_resolver:
        class: Pimcore\Service\Request\PimcoreContextResolver
        arguments: ['@request_stack', '@pimcore.service.context.pimcore_context_guesser']

    pimcore.service.request.site_resolver:
        class: Pimcore\Service\Request\SiteResolver
        arguments: ['@request_stack']

    pimcore.service.request.editmode_resolver:
        class: Pimcore\Service\Request\EditmodeResolver
        arguments: ['@request_stack', '@pimcore_admin.security.user_loader', '@pimcore.http.request_helper']
        calls:
            - [setLogger, ['@logger']]
        tags:
            - { name: monolog.logger, channel: init }
            - { name: pimcore.templating.vars_provider }

    pimcore.service.request.document_resolver:
        class: Pimcore\Service\Request\DocumentResolver
        arguments: ['@request_stack']
        tags:
            - { name: pimcore.templating.vars_provider }

    pimcore.service.request.template_resolver:
        class: Pimcore\Service\Request\TemplateResolver
        arguments:
            - '@request_stack'
            - '@Pimcore\Controller\Config\ConfigNormalizer'

    pimcore.service.request.template_vars_resolver:
        class: Pimcore\Service\Request\TemplateVarsResolver
        arguments: ['@request_stack']

    pimcore.service.request.view_model_resolver:
        class: Pimcore\Service\Request\ViewModelResolver
        arguments: ['@request_stack', '@pimcore.service.request.template_vars_resolver']

    pimcore.service.request.response_header_resolver:
        class: Pimcore\Service\Request\ResponseHeaderResolver
        arguments: ['@request_stack']


    #
    # CONTROLLERS
    #

    Pimcore\Controller\Config\ConfigNormalizer: ~

    Pimcore\Controller\Config\ControllerDataProvider:
        public : true
        arguments:
            $serviceControllers: '%pimcore.service_controllers%'


    #
    # PIMCORE SERVICES
    #

    pimcore.http.request_helper:
        class: Pimcore\Http\RequestHelper
        arguments: ['@request_stack']

    pimcore.http.response_helper:
        class: Pimcore\Http\ResponseHelper

    # TODO inject user?
    pimcore.document_service:
        class: Pimcore\Model\Document\Service

    pimcore.document.renderer:
        class: Pimcore\Document\Renderer\DocumentRenderer
        arguments:
            - '@pimcore.http.request_helper'
            - '@pimcore.templating.action_renderer'
            - '@fragment.renderer.inline'
            - '@Pimcore\Routing\Dynamic\DocumentRouteHandler'


    #
    # HTTP/REST clients
    #

    pimcore.http_client:
        class: \GuzzleHttp\Client
        factory: ['Pimcore\Http\ClientFactory', createHttpClient]

    pimcore.rest_client:
        alias: Pimcore\Tool\RestClient
        public: true

    Pimcore\Tool\RestClient:
        public: true
        arguments:
            - '@pimcore.http_client'

